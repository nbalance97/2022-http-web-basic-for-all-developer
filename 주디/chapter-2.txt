# HTTP(Hyper Text Transfer Protocol)

대부분 요청 응답을 application layer인 HTTP 메시지에 모든 것을 전송한다

## HTTP

- HTML, TEXT
- IMAGE, 음성, 영상, 파일
- JSON, XML (API)
- 거의 모든 형태의 데이터 전송 가능

## HTTP의 역사

HTTP/1,1 1997년 ⇒ 지금 사용하는 것의 대부분의 기능이 있다.
~2014 까지 개정이 됐다

HTTP/2 2015년⇒ 성능 개선

HTTP/3 ⇒ UDP 사용, 성능 개선

주로 HTTP/1.1 사용

나머지도 증가중

## HTTP의 특징

### 클라이언트 - 서버 구조

1. 클라이언트
- 서버에 요청을 보내고 응답을 대기
- UI & 사용자 설정
2. 서버
- 요청에 대한 결과를 만들어서 응답
- 비지니스 로직 & 데이터

⇒ 각각에서 독립적으로 유지보수 및 개발 가능

### stateless protocol

server가 client의 상태를 저장하지 않는다.

- 장점

특정 client와 응답 요청을 지속적으로 보낼 때, **고정된 server가 아니여도 된다.**

→ 응답 server를 쉽게 바꿀 수 있으므로, **server의 확장성**이 높다.

→ 대용량 트래픽에 강해진다!

- 단점

client가 고정된 server 보내는 것이 아니므로, 모든 server가 알 수 있게 정보를 보내야 한다. ⇒ 고정된 server에게 보내는 것보다 더 많은 데이터를 보내야한다.

로그인을 한 사용자의 경우 로그인 했다는 상태(쿠키, 세션 이용)를 서버에 유지해야함

상태 유지는 최소한만으로 사용해야함

### connectionless

client로부터 요청이오고 server가 응답을 보내면 연결을 끊는다.

- 장점

많은 사람들이 서비스를 사용해도, 실제 서버에서 동시에 처리하는 요청을 많지 않음(사용자가 계속 버튼을 누르는 것이 아님)

server의 자원을 최소한으로 효율적인 사용할 수 있다.

- 단점

연결할 때마다 걸리는 시간이 있다.

하나의 자원만 보내는 것이 아닌 여러개의 자원을 요청할 수 있므로 시간이 걸린다.

⇒ HTTP 지속 연결로 해결

- HTTP 지속 연결

여러개의 자원을 동시에 보낸다.

### 단순함, 확장 가능

## HTTP 메시지

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4d071941-00b1-451a-98e3-bcac55746d6e/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f2fe3c26-17e0-4c70-a55c-14e32a0d55fe/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cbdb48a9-065d-4d7a-9984-4a689e74968d/Untitled.png)

## Request

- 시작 라인
1. HTTP 메서드(서버가 수행해야 할 동작 지정) - GET, POST, PUT, DELETE ..
2. 요청 대상 - 절대경로(”/”)+query string
3. HTTP 버전
- 헤더
- 바디

## Response

- 시작 라인
1. HTTP 버전
2. 상태 코드
3. 상태 코드의 설명 글
- 헤더
- 바디

### 헤더

HTTP 전송에 필요한 모든 부가정보

Content-Type, Content-Length 등등

### 바디

실제 전송할 데이터 → byte로 표현할 수 있는 모든 데이터 가능

## HTTP 메서드

클라이언트가 서버에게 기대하는 행동

### HTTP API

- URI 설계

api통해 하고 싶은 것을 문장으로 말했을 때

`행위(동사)는 HTTP 메서드로` `리소스(명사)는 계층적으로 표현`

리소스만으로 표현하기 힘들 경우, 컨트롤 리소스(동사) 사용 가능

- 예시

**라인**을 조회한다. ⇒ GetMapping(”/lines”)

**라인**을 저장한다. ⇒ PostMapping(”/lines”)

**라인**을 수정한다. ⇒ PutMapping(”/lines”)

**라인**을 삭제한다.⇒ DeleteMapping(”/lines”)

[https://library.gabia.com/contents/8339/](https://library.gabia.com/contents/8339/)

### HTTP 메서드 - GET,POST

- GET

리소스 조회하기위해 사용

서버에 전달하고 싶은 데이터는 대부분 query string을 통해서 전달(바디를 사용해도 되지만, 지원하지 않는 곳이 있을 수 있음)

- POST

(메세지 바디를 통해 들어온) request데이터를 처리하는 모든 기능을 수행하기위해 사용

1. 주로 등록할 때 사용
2. 요청 데이터를 처리할 때 사용(ex. 프로세스 상태 변경)
3. 다른 메서드로 처리하기 애매한 경우

### HTTP 메서드 - PUT, PATCH,DELETE

- PUT

리소스를 완전히 대체(있으면 대체, 없으면 생성)

👀 POST와 차이점 : 클라이언트가 리소스의 위치를 알고 URI로 지정

- PATCH

리소스를 부분 대체

- DELETE

리소스를 제거

### HTTP 메서드 - 기타

- HEAD : GET과 동일하지만 메시지 부분을 제외하고, 상태 줄과 헤더만 반환
- OPTIONS : 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)
- CONNECT : 대상 자원으로 식별되는 서버에 대한 터널을 설정
- TRACE : 대상 리소스에 대한 경로를 따라 메시지 루프백 테스트를 수행

### HTTP 메서드의 속성

- 안전

호출해도 리소스 변경X ⇒ GET

- 멱등

몇 번 호출하던 결과가 같다. ⇒ GET, PUT, DELETE

서버에서 응답이 오지 않았을 때, **다시 요쳥해도 되는가**의 판단 근거

외부 요인으로 중간에 리로스가 변경되는 것까지 고려하지 않음

👀PATCH는 설계 마다 다른데, { "operation": "add", "age": 10"} 같을 때는 멱등을 지킬 수 없음

- 캐시가능

응답 결과 리소스를 캐시해서 사용해도 되는가? ⇒ GET, HEAD (POST, PATCH ⇒ 본문(바디)까지 캐시로 고려하기 쉽지 않음) 가능